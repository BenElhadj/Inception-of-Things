Mandatory part

This project will consist of setting up several environments under specific rules.

It is divided into three parts you have to do in the following order:

• Part 1: K3s and Vagrant
• Part 2: K3s and three simple applications
• Part 3: K3d and Argo CD

IV.1 Part 1: K3s and Vagrant

To begin, you have to set up 2 machines.

   Write your first Vagrantfile using the latest stable version of the distribution
of your choice as your operating system. It is STRONGLY advised to allow only the
bare minimum in terms of resources: 1 CPU, 512 MB of RAM (or 1024). The machines
must be run using Vagrant.

Here are the expected specifications:

• The machine names must be the login of someone of your team. The hostname
of the first machine must be followed by the capital letter S (like Server). The
hostname of the second machine must be followed by SW (like ServerWorker).
• Have a dedicated IP on the eth1 interface. The IP of the first machine (Server)
will be 192.168.56.110, and the IP of the second machine (ServerWorker) will be
192.168.56.111.
• Be able to connect with SSH on both machines with no password.

You will set up your Vagrantfile according to modern practices.

You must install K3s on both machines:
• In the first one (Server), it will be installed in controller mode.
• In the second one (ServerWorker), in agent mode.

You will have to use kubectl (and therefore install it too).

Here is an example basic Vagrantfile:

$> cat Vagrantfile
Vagrant.configure(2) do |config|
    [...]
    config.vm.box = REDACTED
    config.vm.box_url = REDACTED

    config.vm.define "wilS" do |control|
            control.vm.hostname = "wilS"
            control.vm.network REDACTED, ip: "192.168.56.110"
            control.vm.provider REDACTED do |v|
                v.customize ["modifyvm", :id, "--name", "wilS"]
                [...]
        end
        config.vm.provision :shell, :inline => SHELL
            [...]
        SHELL
        control.vm.provision "shell", path: REDACTED
    end
    config.vm.define "wilSW" do |control|
            control.vm.hostname = "wilSW"
            control.vm.network REDACTED, ip: "192.168.56.111"
            control.vm.provider REDACTED do |v|
                v.customize ["modifyvm", :id, "--name", "wilSW"]
                [...]
            end
            config.vm.provision "shell", inline: <<-SHELL
                [..]
            SHELL
            control.vm.provision "shell", path: REDACTED
    end
end

Here is an example when the virtual machines are launched:

-> p1 vagrant up
Bringing machine 'wilS' up with 'virtualbox' provider...
Bringing machine 'wilSW' up with 'virtualbox' provider...
            [...]
-> p1 vagrant ssh wilS                      -> p1 vagrant ssh wilSW
[vagrant@wilS ~]$                           [vagrant@wils ~]$

Here is an example when the configuration is not complete:

[vagrant@wilS ~]$   k get nodes -o wide 
NAME     STATUS     ROLES                     AGE       VERSION          INTERNAL-IP        EXTERNAL-IP     OS-IMAGE           KERNEL-VERSION                  CONTAINER-RUNTIME
wils     Ready      controle-plane,master     4m37s     v1.21.4+k3s1     192.168.42.110     <none>          CentOS Linux 8     4.18.0-240.1.1.el8_3.x86_64     containerd://1.4.9-k3s1
[vagrant@wilS ~]$   ifconfig eth1
eth1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST> mtu1500
        inet 192.168.42.110 netmask 255.255.255.0 broadcast 192.168.42.255
        inet6 fe80::a00:27ff:fe79:56d8 prefixlen 64 scopeid 0x20<link>
        ether 08:00:27:79:56:d8 txqueuelen 1000 (Ethernet)
        RX packets 10 bytes 2427 (2.3 Kib)
        RX errors 0 dropped 0 overruns 0 frame 0
        TX packets 28 bytes 3702 (3.6 Kib)
        TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0

Here is an example when the machines are correctly configured:


[vagrant@wilS ~]$   k get nodes -o wide 
NAME     STATUS     ROLES                     AGE       VERSION          INTERNAL-IP        EXTERNAL-IP     OS-IMAGE           KERNEL-VERSION                  CONTAINER-RUNTIME
wils     Ready      controle-plane,master     16m       v1.21.4+k3s1     192.168.42.110     <none>          CentOS Linux 8     4.18.0-240.1.1.el8_3.x86_64     containerd://1.4.9-k3s1
wilsW    Ready      <none>                    78s       v1.21.4+k3s1     192.168.42.111     <none>          CentOS Linux 8     4.18.0-240.1.1.el8_3.x86_64     containerd://1.4.9-k3s1
[vagrant@wilS ~]$   ifconfig eth1
eth1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST> mtu1500
        inet 192.168.42.111 netmask 255.255.255.0 broadcast 192.168.42.255
        inet6 fe80::a00:27ff:fea8:bcb4 prefixlen 64 scopeid 0x20<link>
        ether 08:00:27:a8:bc:b4 txqueuelen 1000 (Ethernet)
        RX packets 446 bytes 322199 (314.6 Kib)
        RX errors 0 dropped 0 overruns 0 frame 0
        TX packets 472 bytes 101181 (98.8 Kib)
        TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0

[vagrant@wilS ~]$
