# pour avoir autosuggestions "c'est optionnel"
# il faut ajouter zsh-autosuggestions au plagins
# dans le fichier .zshrc comme suite
# 'plugins=(git
#             zsh-autosuggestions
#             )'

#########################################
# si l'espace sur le goinfre depace 28G #
#########################################

echo "export VBOX_USER_HOME=\"/goinfre/$(whoami)/Inception-of-Things/.configVB\"" >> ~/.zshrc
echo "export VAGRANT_HOME=\"/goinfre/$(whoami)/Inception-of-Things/.vagrant.d\"" >> ~/.zshrc
echo "export VBOX_MSI_INSTALL_PATH=\"/goinfre/$(whoami)/Inception-of-Things/VirtualBoxVMs\"" >> ~/.zshrc
echo "export VBOX_MSI_INSTALL_PATH=\"/goinfre/$(whoami)/Inception-of-Things/VirtualBoxVMs\"" >> ~/.bashrc

####################################################################################
# pour changer le dossier par default de l'enregisrement de la VM dans Virtual Box #
####################################################################################

VBoxManage setproperty machinefolder /goinfre/$(whoami)/Inception-of-Things/VirtualBoxVMs

###########################################
# sinon il faut travailler sur l'sgoinfre #
###########################################

echo "export VBOX_USER_HOME=\"/mnt/nfs/homes/$(whoami)/sgoinfre/Inception-of-Things/.configVB\"" >> ~/.zshrc
echo "export VAGRANT_HOME=\"/mnt/nfs/homes/$(whoami)/sgoinfre/Inception-of-Things/.vagrant.d\"" >> ~/.zshrc
echo "export VBOX_MSI_INSTALL_PATH=\"/mnt/nfs/homes/$(whoami)/sgoinfre/Inception-of-Things/VirtualBoxVMs\"" >> ~/.zshrc
echo "export VBOX_MSI_INSTALL_PATH=\"/mnt/nfs/homes/$(whoami)/sgoinfre/Inception-of-Things/VirtualBoxVMs\"" >> ~/.bashrc

####################################################################################
# pour changer le dossier par default de l'enregisrement de la VM dans Virtual Box #
####################################################################################

VBoxManage setproperty machinefolder /mnt/nfs/homes/$(whoami)/sgoinfre/Inception-of-Things/VirtualBoxVMs

###########################################

source ~/.zshrc

##############################

# vagrant up
# vagrant reload 
# vagrant ssh 

# vagrant halt
# vagrant up
# vagrant provision

# en cas de probleme dans la machine vagrant@Inseption-Of-Things pour eviter de retapper les commandes une par une

# vagrant halt -f && vagrant destroy -f && rm -rf /sgoinfre/goinfre/Perso/$(whoami)/Inception-of-Things/.configVB /sgoinfre/goinfre/Perso/$(whoami)/Inception-of-Things/.vagrant /sgoinfre/goinfre/Perso/$(whoami)/Inception-of-Things/VirtualBoxVMs ~/VirtualBox\ VMs 

###################################################################
# avant de commencer assurer vous d'avoir votre VirtualBox ouvert #
###################################################################

#####################
# pour tester le p1 #
#####################

en cas ou il y a une message d'erreur de virtualbox
vagrant box remove generic/ubuntu2004

cd p1
chmod +x scripts.sh
vagrant up
 
vagrant global-status

vagrant ssh $(whoami)S
 
k get nodes -o wide

dans un autre terminale et au memme dossier
vagrant ssh $(whoami)SW

k describe node $(whoami)S
k describe node $(whoami)SW

ifconfig eth1

vagrant halt -f && vagrant destroy -f && rm -rf /sgoinfre/goinfre/Perso/$(whoami)/Inception-of-Things/.configVB /sgoinfre/goinfre/Perso/$(whoami)/Inception-of-Things/VirtualBoxVMs ~/VirtualBox\ VMs .vagrant 

#####################
# pour tester le p2 #
#####################

cd p2
chmod +x ./scripts/*
vagrant up

vagrant global-status --prune

vagrant ssh $(whoami)S

ifconfig eth1

k get nodes -o wide

k get all -n kube-system
k get all
k get svc
curl -H "Host:app2.com" 192.168.56.110
k get ingress
k -n kube-system get pods

k get deployments
k get nodes
k get services

dans le navigateur
il faut activer ce plugin sur google chrome
https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif
et ajouter ces deux regles:
    OmegaOptions/OmegaProfile_auto_switch.pac et 
    OmegaOptions/OmegaProfile_Inception_of_Things.pac ou 
    tout les parametre d'un coup avec OmegaOptions/OmegaOptions.bak
puis activer le profile Inception-of-Things

et acceder a ces liens
http://192.168.56.110/
http://app1.com
http://app2.com
http://app3.com

vagrant halt -f && vagrant destroy -f && rm -rf /sgoinfre/goinfre/Perso/$(whoami)/Inception-of-Things/.configVB /sgoinfre/goinfre/Perso/$(whoami)/Inception-of-Things/VirtualBoxVMs ~/VirtualBox\ VMs .vagrant 

#####################
# pour tester le p3 #
#####################

#######################################################################
#######      ajouter a la fichier ~/.gitconfig ces lignes       #######
#######################################################################
echo "[user]
	email = votre_email@email.com
    name = votre_login
[alias]
    up = !sh -c 'git add -A && git commit -m "$1" && git push' -" >> ~/.gitconfig
#######################################################################
# vous devez remplacer votre adresse email de git et votre nom de git #
#######################################################################

La différence majeure entre K3S et K3D
est que K3S déploie un cluster Kubernetes basé sur une machine virtuelle,
tandis que K3D déploie des clusters Kubernetes K3S basés sur Docker,
ce qui peut offrir une version plus évolutive de K3S
et le rendre préférable au K3S standard

K3s et K3d sont deux outils différents qui servent des buts similaires mais dans des contextes légèrement différents. Ils sont tous deux utilisés pour déployer des clusters Kubernetes, mais le font de différentes manières.
K3s est une distribution légère de Kubernetes. Elle est destinée aux environnements avec des ressources limitées, comme les appareils IoT (Internet des objets) ou les petites instances de serveur. K3s élimine plusieurs fonctionnalités non essentielles généralement trouvées dans les distributions Kubernetes standard pour réduire la consommation de ressources système. Malgré sa taille réduite, K3s reste une distribution Kubernetes entièrement fonctionnelle et peut être utilisée pour héberger des applications dans une multitude d'environnements.
K3d est un outil qui permet de créer des clusters K3s dans Docker. En d'autres termes, il vous permet d'exécuter K3s comme un conteneur Docker, ce qui est très utile pour les environnements de développement ou de test. Avec K3d, vous pouvez rapidement créer et détruire des clusters K3s sur votre machine locale, ce qui facilite le test de vos applications dans un environnement similaire à celui d'un cluster Kubernetes réel.
En résumé, K3s est une distribution légère de Kubernetes, tandis que K3d est un outil pour exécuter cette distribution légère dans Docker.

dans le dossier IOT
git stash && git fetch && git pull

cd p3

chmod +x *

./install.sh

sudo kubectl get ns
sudo kubectl get pods -n dev
sudo kubectl get pods -n argocd
sudo kubectl get nodes

dans le dossier de IOT-wil-deployment
cat manifests/wil-deployment.yaml | grep image
cat manifests/wil-deployment.yaml | grep v1
curl http://localhost:8888/

sed -i 's/wil42\/playground\:v1/wil42\/playground\:v2/g' manifests/wil-deployment.yaml

git up "v2"

curl http://localhost:8888/

sed -i 's/wil42\/playground\:v2/wil42\/playground\:v1/g' manifests/wil-deployment.yaml
git up "v1"

curl http://localhost:8888/

########################
# pour tester le Bonus #
########################

cd bonus

./install-gitlab-bonus.sh

sudo kubectl get ns
sudo kubectl get pods -n dev
sudo kubectl get pods -n argocd
sudo kubectl get nodes

dans le dossier de IOT-wil-deployment
cat manifests/wil-deployment.yaml | grep image
cat manifests/wil-deployment.yaml | grep v1
curl http://localhost:8888/

sed -i 's/wil42\/playground\:v1/wil42\/playground\:v2/g' manifests/wil-deployment.yaml

git up "v2"

curl http://localhost:8888/

sed -i 's/wil42\/playground\:v2/wil42\/playground\:v1/g' manifests/wil-deployment.yaml
git up "v1"

curl http://localhost:8888/


sudo docker ps -a
sudo docker stop $(sudo docker ps -a -q)
sudo docker rm $(sudo docker ps -a -q)

sudo docker images -a
sudo docker rmi $(sudo docker images -q)

sudo docker volume ls
sudo docker volume rm $(sudo docker volume ls -q)

sudo docker stop $(sudo docker ps -a -q) && sudo docker rm $(sudo docker ps -a -q) && sudo docker rmi $(sudo docker images -q) && sudo docker volume rm $(sudo docker volume ls -q)


# k logs -n kube-system $(kubectl get pods -n kube-system -l k8s-app=metrics-server -o jsonpath='{.items[0].metadata.name}')

vagrant halt -f && vagrant destroy -f && rm -rf /sgoinfre/goinfre/Perso/$(whoami)/Inception-of-Things/.configVB /sgoinfre/goinfre/Perso/$(whoami)/Inception-of-Things/VirtualBoxVMs ~/VirtualBox\ VMs .vagrant

